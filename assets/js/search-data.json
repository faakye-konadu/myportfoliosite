{
  
    
        "post0": {
            "title": "Title",
            "content": "SELECTION OF STOCKS FOR INVESTMENT USING PRINCIPAL COMPONENT ANALYSIS - Python . This project aims to help investors select the right stock for investment using the principal component analysis technique. Principal component analysis (PCA) helps to uncover hidden patterns and associations in data. Its applications span finance, data science, data analysis, machine learning, and other fields. PCA transforms a dataset into a new set of independent variables (known as principle components) that are uncorrelated with one another. . The dataset originally contained several variables that could be correlated with one another. Principal component analysis reduces the size of the data and extracts useful information capable of representing the entire data set. In order to achieve these goals, it computes new variables called principal components that are generated as linear combinations of the original variables.  . The first principal component is required to have the largest possible variance. The second component must be orthogonal to the first component in order to be computed. The other components are computed likewise. The values of these new variables for the observations are called factors scores, and they can be interpreted geometrically as the projections of the observations onto the principal components. . 1. Packages used in this project. . import pandas as pd # Used for data manipulation import yfinance as yf # Used  for downloading historical data from sklearn.decomposition import PCA # Used for performing principal component analysis import seaborn as sns # Used for data visualisation import sweetviz as sv # Used for exploratory data analysis (EDA) import numpy as np # Used to also performing computation import matplotlib.pyplot as plt # Also used for data visualization from sklearn import preprocessing # Used to scale the data before performing the principal component analysis . 2. Import the historical data of 67 stock prices from Yahoo Finance and convert them to returns. . # List of stock tickers to download data tickers = [&#39;AAPL&#39;, &#39;GOOG&#39;, &#39;MSFT&#39;, &#39;AMZN&#39;, &#39;INTC&#39;, &#39;CSCO&#39;, &#39;CMCSA&#39;, &#39;PEP&#39;, &#39;GILD&#39;, &#39;NVDA&#39;, &#39;ORCL&#39;, &#39;T&#39;, &#39;VZ&#39;, &#39;PFE&#39;, &#39;HD&#39;, &#39;UNH&#39;, &#39;MO&#39;, &#39;WBA&#39;, &#39;BMY&#39;, &#39;MRK&#39;, &#39;NEE&#39;, &#39;DUK&#39;, &#39;EXC&#39;, &#39;SRE&#39;, &#39;SO&#39;, &#39;D&#39;, &#39;DOW&#39;, &#39;XOM&#39;, &#39;CVX&#39;, &#39;BAC&#39;, &#39;JPM&#39;, &#39;C&#39;, &#39;V&#39;, &#39;MA&#39;, &#39;WFC&#39;, &#39;USB&#39;, &#39;PNC&#39;, &#39;BK&#39;, &#39;MET&#39;, &#39;TRV&#39;, &#39;DIS&#39;, &#39;MCD&#39;, &#39;PYPL&#39;, &#39;COST&#39;, &#39;AMGN&#39;, &#39;UNP&#39;, &#39;HD&#39;, &#39;BA&#39;, &#39;KO&#39;, &#39;MCO&#39;, &#39;IBM&#39;, &#39;LMT&#39;, &#39;GS&#39;, &#39;AAL&#39;, &#39;AEP&#39;, &#39;AWK&#39;, &#39;DTE&#39;, &#39;ETN&#39;, &#39;EIX&#39;, &#39;NEE&#39;, &#39;NSC&#39;, &#39;PCG&#39;, &#39;PNW&#39;, &#39;PPL&#39;, &#39;PXD&#39;, &#39;VTR&#39;, &#39;WEC&#39;, &#39;XEL&#39;, &#39;XRX&#39;] # Download data for all tickers data = yf.download(tickers, start=&#39;2019-01-01&#39;, end=&#39;2021-12-31&#39;) # Select the Adj Close column for all tickers adj_close = data[&#39;Adj Close&#39;] # Calculate the daily returns returns = adj_close.pct_change() # Print the first three rows of the data frame (returns) returns.head(3) . [*********************100%***********************] 67 of 67 completed . AAL AAPL AEP AMGN AMZN AWK BA BAC BK BMY ... USB V VTR VZ WBA WEC WFC XEL XOM XRX . Date . 2019-01-02 NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | ... | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | NaN | . 2019-01-03 -0.074507 | -0.099607 | -0.002331 | -0.015216 | -0.025241 | 0.003943 | -0.039869 | -0.016026 | -0.019789 | -0.132641 | ... | -0.014024 | -0.036036 | 0.016866 | 0.00357 | -0.010435 | 0.002664 | -0.007882 | -0.003940 | -0.015354 | -0.021858 | . 2019-01-04 0.065868 | 0.042690 | 0.009207 | 0.034184 | 0.050064 | 0.007518 | 0.052042 | 0.041531 | 0.028995 | 0.039229 | ... | 0.024727 | 0.043081 | -0.004837 | 0.00249 | 0.033269 | 0.007379 | 0.029633 | 0.009786 | 0.036870 | 0.038598 | . 3 rows × 67 columns . 3. Fill the NaN values with zero and check the shape of the data. . returns.fillna(0, inplace= True ) # Check the shape of the data for verification returns.shape # The data consists of 756 rows and 67 columns (stocks in this project).  . (756, 67) . 4. Visualize the data . Before beginning exploratory data analysis, visualise the data to identify any anomalies.  . returns.head(3) # Look at the first five rows and even more of the raws for verification. . AAL AAPL AEP AMGN AMZN AWK BA BAC BK BMY ... USB V VTR VZ WBA WEC WFC XEL XOM XRX . Date . 2019-01-02 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | ... | 0.000000 | 0.000000 | 0.000000 | 0.00000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | 0.000000 | . 2019-01-03 -0.074507 | -0.099607 | -0.002331 | -0.015216 | -0.025241 | 0.003943 | -0.039869 | -0.016026 | -0.019789 | -0.132641 | ... | -0.014024 | -0.036036 | 0.016866 | 0.00357 | -0.010435 | 0.002664 | -0.007882 | -0.003940 | -0.015354 | -0.021858 | . 2019-01-04 0.065868 | 0.042690 | 0.009207 | 0.034184 | 0.050064 | 0.007518 | 0.052042 | 0.041531 | 0.028995 | 0.039229 | ... | 0.024727 | 0.043081 | -0.004837 | 0.00249 | 0.033269 | 0.007379 | 0.029633 | 0.009786 | 0.036870 | 0.038598 | . 3 rows × 67 columns . 5. Perform basic exploratory data analysis (EDA) to understand and check the validity of the data. . analyze_report = sv.analyze(returns) # This code prints out the reports of the EDA in the Jupyter notebook analyze_report.show_notebook() . 6. Transform the data to have a mean of zero (0) and a standard deviation of one (1). . Principal component anaysis is sensitive to the scale of the variables. The variables with bigger values tend to dominate the analysis and could mislead the analysis. To give equal weight to the variables, they should be scaled. . Scaling also helps find the underlying structure in the data. And as it can be seen in the above exploratory data analysis (EDA), the values in the variable are varying significantly from each other and should be scaled. . In this project, the data (returns) is scaled and stored in a new dataframe called s_returns. . s_returns = preprocessing.scale(returns) . 7. &#160;Create a PCA object to indicate the number of components to keep. .  In this analysis, four components would be kept. . pca = PCA( n_components = 4) . 8. Fit the principal component analysis to the scaled data. . pca.fit(s_returns) . PCA(n_components=4) . In a Jupyter environment, please rerun this cell to show the HTML representation or trust the notebook. On GitHub, the HTML representation is unable to render, please try loading this page with nbviewer.org.PCAPCA(n_components=4) . 9. Transform the scaled data (s_returns) into &#160;four principal components and store them in a dataframe (finpca). . returns_transformed = pca.transform(s_returns) # Store the principal components into a dataframe (finpca) and label the columns accordingly finpca = pd.DataFrame( returns_transformed, columns = [&#39;pc1&#39;, &#39;pc2&#39;,&#39;pc3&#39;,&#39;pc4&#39;]) # visualize the data finpca.head(4) . pc1 pc2 pc3 pc4 . 0 0.337597 | -0.048601 | 0.152500 | 0.030325 | . 1 7.000267 | 1.223269 | 6.068103 | -0.438066 | . 2 -11.256394 | -0.826394 | -4.527366 | 1.502213 | . 3 -0.647689 | -1.168537 | -2.227796 | 0.823084 | . 10. Check the level of variation in the data the four principal components have been able to capture. . In this instance, it has been able to capture almost 68% of the variation (information) in the data. This is a good sign, so the four components will be maintained for the rest of the analysis. . The information captured in our data would also be plotted in a scree plot. . print( &#39;This ratio explained by the each four(4) principal components are :&#39;, &#39; t&#39;, pca.explained_variance_ratio_, &#39; n&#39;, &#39;The ratio explained by the total four(4) principal components are :&#39;, &#39; t&#39;, pca.explained_variance_ratio_.sum() , &#39;or&#39; , (pca.explained_variance_ratio_*100).sum(), &#39;%&#39; ) # Visualize the amount of variance captured in the data by the four principal components on a scree plot # Get the percentage of variance explained by each component var_explained = pca.explained_variance_ratio_ *100 # Get the number of components n_components = len(var_explained) +1 # Create a figure and an Axes object fig, ax = plt.subplots() # Plot the explained variance as a bar plot ax.bar(range(1, n_components), var_explained) # Set the xlabel to &quot;Number of components&quot; ax.set_xlabel(&quot;Number of Components&quot;) # Set the ylabel to &quot;Explained variance&quot; ax.set_ylabel(&quot;Explained Variance %&quot;) # Add a title to the plot plt.title(&quot;Scree Plot&quot;) # Set the theme of the plot to &quot;darkgrid&quot; and the color palette to &quot;colorblind&quot; sns.set_style(&quot;darkgrid&quot;) # Show the plot plt.show() . This ratio explained by the each four(4) principal components are : [0.49861986 0.08062299 0.0571617 0.03086397] The ratio explained by the total four(4) principal components are : 0.6672685150635381 or 66.7268515063538 % . 11. Extract the loadings of the principal component. . loadings = pca.components_ . 12. Create a dataframe to contain the principal component loadings. . variable_names = list(returns.columns) # Index name used in the loading dataframe(loading_df) indexname = [&#39;first_pc_loadings&#39;, &#39;second_pc_loadings&#39;, &#39;third_pc_loadings&#39;, &#39;forth_pc_loadings&#39;] # Store the dataframe containing the loadings values loadings_df = pd.DataFrame(loadings, columns= variable_names, index = indexname) loadings_df.head(5) . AAL AAPL AEP AMGN AMZN AWK BA BAC BK BMY ... USB V VTR VZ WBA WEC WFC XEL XOM XRX . first_pc_loadings -0.083372 | -0.111058 | -0.116442 | -0.104710 | -0.073746 | -0.115237 | -0.116084 | -0.142664 | -0.130144 | -0.096885 | ... | -0.139320 | -0.139748 | -0.111740 | -0.113392 | -0.096365 | -0.108674 | -0.134955 | -0.123581 | -0.123759 | -0.116504 | . second_pc_loadings -0.185211 | 0.023923 | 0.234020 | 0.094740 | 0.038759 | 0.250487 | -0.131640 | -0.173634 | -0.144694 | 0.045464 | ... | -0.156166 | -0.032765 | -0.070394 | 0.105312 | -0.032184 | 0.259021 | -0.143865 | 0.242420 | -0.165894 | -0.142526 | . third_pc_loadings 0.084467 | -0.273167 | 0.131372 | -0.129351 | -0.335195 | 0.062678 | 0.055805 | 0.062754 | 0.056524 | -0.065773 | ... | 0.110919 | -0.114939 | 0.104964 | 0.055302 | 0.023786 | 0.103539 | 0.099501 | 0.073980 | 0.068226 | 0.046123 | . forth_pc_loadings -0.054182 | -0.050239 | -0.004136 | 0.212814 | -0.054350 | -0.040583 | -0.140532 | 0.086008 | 0.098304 | 0.154771 | ... | 0.093607 | -0.111388 | -0.228686 | 0.227045 | 0.305448 | 0.023404 | 0.067034 | -0.057875 | 0.029507 | -0.077952 | . 4 rows × 67 columns . 13. Select the maximum absolute value for each of the four principal component loadings. . The maximum absolute value represents the stock, which is selected to represent that principal component loading. .  MET: MetLife, Inc., WEC: Wisconsin Energy Corporation, AMZN: Amazon.com, Inc., and GILD: Gilead Sciences, Inc. are the stocks that represented the four principal components. . These selected stocks represent all 67 stocks. As an investor, you can buy these four stocks rather than a large number of small stocks. This is because they capture most of the variations in the other unselected 63 stocks. . loadings_df.abs().idxmax(axis=&quot;columns&quot;) . first_pc_loadings MET second_pc_loadings WEC third_pc_loadings AMZN forth_pc_loadings GILD dtype: object . NOTE: . Here are the names of the sixty-seven (67) companies whose stocks were used in this project. . AAL: American Airlines Group Inc . AAPL: Apple Inc . AEP: American Electric Power Company Inc . AMGN: Amgen Inc . AMZN: Amazon.com, Inc . AWK: American Water Works Company Inc . BA: The Boeing Company . BAC: Bank of America Corporation . BK: The Bank of New York Mellon Corporation . BMY: Bristol-Myers Squibb Company . C: Citigroup Inc . CMCSA: Comcast Corporation . COST: Costco Wholesale Corporation . CSCO: Cisco Systems, Inc . CVX: Chevron . D: Dominion Energy Inc . DIS: The Walt Disney Company . DOW: Dow Inc . DTE: DTE Energy Company . DUK: Duke Energy Corporation . EIX: Edison International . ETN: Eaton Corporation plc . EXC: Exelon Corporation . GILD: Gilead Sciences, Inc . GOOG: Alphabet Inc (Google) . GS: The Goldman Sachs Group, Inc . HD: The Home Depot, Inc . IBM: International Business Machines Corporation . INTC: Intel Corporation . JPM: JPMorgan Chase &amp; Co . KO: The Coca-Cola Company . LMT: Lockheed Martin Corporation . MA: Mastercard Inc . MCD: McDonald&#39;s Corporation . MCO: Moody&#39;s Corporation . MET: MetLife, Inc . MO: Altria Group Inc . MRK: Merck &amp; Co., Inc . MSFT: Microsoft Corporation . NEE: NextEra Energy Inc . NSC: Norfolk Southern Corporation . NVDA: NVIDIA Corporation . ORCL: Oracle Corporation . PCG: PG&amp;E Corporation . PEP: PepsiCo, Inc . PFE: Pfizer Inc . PNC: The PNC Financial Services Group, Inc . PNW: Pinnacle West Capital Corporation . PPL: PPL Corporation . PXD: Pioneer Natural Resources Company . PYPL: PayPal Holdings, Inc . SO: Southern Company (The) . SRE: Sempra Energy . T: AT&amp;T Inc . TRV: The Travelers Companies, Inc . UNH: UnitedHealth Group Inc . UNP: Union Pacific Corporation . USB: U.S. Bancorp . V: Visa Inc . VTR: Ventas, Inc . VZ: Verizon Communications Inc . WBA: Walgreens Boots Alliance, Inc . WEC: Wisconsin Energy Corporation . WFC: Wells Fargo &amp; Company . XEL: Xcel Energy Inc . XOM: Exxon Mobil Corporation . XRX: Xerox Corporation . ===========================================Thank You===================================================== . Name : Faakye Konadu Samuel . Position: Data Analyst . Email: konadufaakye@gmail.com . Tel: +233245938995 . . . first_pc_loadings PCG second_pc_loadings WEC third_pc_loadings PPL forth_pc_loadings GILD dtype: object . . first_pc_loadings MET second_pc_loadings WEC third_pc_loadings AMZN forth_pc_loadings GILD dtype: object . loadings_df.abs().max() . AAL 0.185212 AAPL 0.273167 AEP 0.234020 AMGN 0.212830 AMZN 0.335195 ... WEC 0.259021 WFC 0.143865 XEL 0.242420 XOM 0.165894 XRX 0.142526 Length: 67, dtype: float64 .",
            "url": "https://gigtall.github.io/myportfoliosite/2023/01/11/SELECTION_OF_STOCKS_FOR_INVESTMENT.html",
            "relUrl": "/2023/01/11/SELECTION_OF_STOCKS_FOR_INVESTMENT.html",
            "date": " • Jan 11, 2023"
        }
        
    
  
    
        ,"post1": {
            "title": "ANALYSIS USING DUMMY VARIABLES",
            "content": "import wooldridge as wd import statsmodels.formula.api as smf import pandas as pd import seaborn as sns . test = pd.DataFrame(wd.data(&#39;jtrain2&#39;)) . test.head(5) . test[&#39;train&#39;].value_counts() . test[&#39;train&#39;].value_counts().plot(kind = &#39;pie&#39;,title = &#39;NUMBERS IN EACH GROUP&#39;) . test[&#39;train&#39;].value_counts().plot(kind = &#39;barh&#39;,title = &#39;NUMBERS IN EACH GROUP&#39;) . train0, train1 =test.loc[test[&#39;train&#39;] == 0],test.loc[test[&#39;train&#39;] == 1] . train0[&#39;re78&#39;].mean() . train1[&#39;re78&#39;].mean() . (train1[&#39;re78&#39;].mean()) -(train0[&#39;re78&#39;].mean()) . results = smf.ols (formula= &#39;re78 ~ train&#39;, data = test) . print (results.fit().summary()) .",
            "url": "https://gigtall.github.io/myportfoliosite/2022/10/10/my-first-test.ipynb.html",
            "relUrl": "/2022/10/10/my-first-test.ipynb.html",
            "date": " • Oct 10, 2022"
        }
        
    
  
    
        ,"post2": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://gigtall.github.io/myportfoliosite/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://gigtall.github.io/myportfoliosite/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Mr. Faakye Konadu Samuel is a data analyst. He is very fluent in programming languages like Python, R, SQL, Microsoft PowerBI, Stata, and Eviews. He is also a chartered economist and holds two masters’ degrees; . Master of Science in Financial Economics-Ghana Institute of Management and Public Administration-Ghana. . | Master of Business Administration – Anglia Ruskin University – United Kingdom. . | . CONTACT: Tel: +233245938995 . Email: ‘konadufaakye@gmail.com’ .",
          "url": "https://gigtall.github.io/myportfoliosite/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
  

  
      ,"page11": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://gigtall.github.io/myportfoliosite/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}